/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ${go_package_name}

import (
	"${go_module_name}/pkg/common"
	"mosn.io/api"
)

// ProtocolHeader is the header part of bolt v1 request
type ProtocolHeader struct {
	Flag       byte   // request flag, 1：请求， 2：响应，3： 心跳请求，4：心跳响应
	RequestId  uint32 // request id
	Codec      byte   // serialize id
	HeaderLen  uint16 // header length
	ContentLen uint16 // body length

	// TODO: 请添加请求/响应都存在的字段

	common.Header // request key value pair
}

func (h *ProtocolHeader) Clone() api.HeaderMap {
	clone := &ProtocolHeader{}
	*clone = *h

	// deep copy
	clone.Header = *(h.Header.Clone().(*common.Header))

	return clone
}

// Request is the cmd struct of bolt v1 request
type Request struct {
	ProtocolHeader

	Timeout    uint32
	rawData    []byte // raw data
	rawHeader  []byte // sub slice of raw data, header bytes
	rawContent []byte // sub slice of raw data, content bytes

	// TODO: 请添加请求特有的字段，如果存在

	Data    api.IoBuffer // wrapper of raw data
	Content api.IoBuffer // wrapper of raw content

	ContentChanged bool // indicate that content changed
}

var _ api.XFrame = &Request{}

func (r *Request) GetRequestId() uint64 {
	return ${go_getRequestID}
}

func (r *Request) SetRequestId(id uint64) {
	${go_setRequestID}
}

func (r *Request) IsHeartbeatFrame() bool {
	return r.Flag == CmdRequestHeartbeat
}

func (r *Request) GetTimeout() int32 {
	return int32(r.Timeout)
}

func (r *Request) GetStreamType() api.StreamType {
	switch r.Flag {
	case CmdRequest, CmdRequestHeartbeat:
		return api.Request
	case CmdResponse, CmdResponseHeartbeat:
		return api.Response
	default:
		return api.Request
	}
}

func (r *Request) GetHeader() api.HeaderMap {
	return r
}

func (r *Request) GetData() api.IoBuffer {
	return r.Content
}

func (r *Request) SetData(data api.IoBuffer) {
	// judge if the address unchanged, assume that proxy logic will not operate the original Content buffer.
	if r.Content != data {
		r.ContentChanged = true
		r.Content = data
	}
}

// Response is the cmd struct of bolt v1 response
type Response struct {
	ProtocolHeader

	Status     uint32
	rawData    []byte // raw data
	rawHeader  []byte // sub slice of raw data, header bytes
	rawContent []byte // sub slice of raw data, content bytes

	// TODO: 请添加响应特有的字段，如果存在

	Data    api.IoBuffer // wrapper of raw data
	Content api.IoBuffer // wrapper of raw content

	ContentChanged bool // indicate that content changed
}

var _ api.XRespFrame = &Response{}

func (r *Response) GetRequestId() uint64 {
	return ${go_getRequestID}
}

func (r *Response) SetRequestId(id uint64) {
	${go_setRequestID}
}

func (r *Response) IsHeartbeatFrame() bool {
	return r.Flag == CmdResponseHeartbeat
}

// GetTimeout response: There is no timeout.
func (r *Response) GetTimeout() int32 {
	return -1
}

func (r *Response) GetStreamType() api.StreamType {
	return api.Response
}

func (r *Response) GetHeader() api.HeaderMap {
	return r
}

func (r *Response) GetData() api.IoBuffer {
	return r.Content
}

func (r *Response) SetData(data api.IoBuffer) {
	// judge if the address unchanged, assume that proxy logic will not operate the original Content buffer.
	if r.Content != data {
		r.ContentChanged = true
		r.Content = data
	}
}

func (r *Response) GetStatusCode() uint32 {
	return r.Status
}
