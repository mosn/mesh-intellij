/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ${go_package_name}

import (
	"context"
	"mosn.io/api"
	"mosn.io/pkg/buffer"
)

func encodeRequest(ctx context.Context, request *Request) (api.IoBuffer, error) {

	// 1. slow-path, construct buffer from scratch
	if len(request.Header.Kvs) != 0 {
		request.HeaderLen = uint16(getEncodeHeaderLength(&request.ProtocolHeader))
	}
	if request.Content != nil {
		request.ContentLen = uint16(request.Content.Len())
	}
	frameLen := RequestHeaderLen + int(request.HeaderLen) + int(request.ContentLen)

	// 1.1 alloc encode buffer, this buffer will be recycled after connection.Write
	buf := buffer.GetIoBuffer(frameLen)

	// 1.2 encode: header, content
	panic("实现: 严格按照私有协议规范字段顺序，依次写入buf中")

	// TODO: 删除panic以及以下注释，按照私有协议规范字段顺序，依次写入buf中:
	// example: 假设私有协议规范要求依次写入Flag、RequestId、HeaderLen和ContentLen
	// 注意Flag字段通用标识请求类型, 根据实际协议修改，按照协议要求编码到buf中
	// buf.WriteByte(request.Flag)
	// buf.WriteUint32(request.RequestId)
	// buf.WriteUint16(request.HeaderLen)
	// buf.WriteUint16(request.ContentLen)

	// 1.3 header
	if request.HeaderLen > 0 {
		// TODO: 根据实际协议，决定是否需要编码协议头部键值对，依次写入buf中:
		// 如果需要编码键值对，请反注释encodeHeader实现，并删除TODO
		// encodeHeader(buf, &request.ProtocolHeader)
	}
	// 1.4 content
	if request.ContentLen > 0 {
		// TODO: 根据实际协议，决定是否需要将消息体写入buf中:
		// 如果需要写入报文体，请反注释buf.Write，并删除TODO
		// buf.Write(request.Content.Bytes())
	}

	return buf, nil
}

func encodeResponse(ctx context.Context, response *Response) (api.IoBuffer, error) {

	// 1. slow-path, construct buffer from scratch
	if len(response.Header.Kvs) != 0 {
		response.HeaderLen = uint16(getEncodeHeaderLength(&response.ProtocolHeader))
	}
	if response.Content != nil {
		response.ContentLen = uint16(response.Content.Len())
	}
	frameLen := ResponseHeaderLen + int(response.HeaderLen) + int(response.ContentLen)

	// 1.1 alloc encode buffer, this buffer will be recycled after connection.Write
	buf := buffer.GetIoBuffer(frameLen)

	// 1.2 encode: header, content
	panic("实现: 严格按照私有协议规范字段顺序，依次写入buf中")

	// TODO: 删除panic以及以下注释，按照私有协议规范字段顺序，依次写入buf中:
	// example: 假设私有协议规范要求依次写入Flag、RequestId、HeaderLen和ContentLen
	// 注意Flag字段通用标识请求类型, 根据实际协议修改，按照协议要求编码到buf中
	// buf.WriteByte(response.Flag)
	// buf.WriteUint32(response.RequestId)
	// buf.WriteUint16(response.HeaderLen)
	// buf.WriteUint16(response.ContentLen)

	// 1.3 header
	if response.HeaderLen > 0 {
		// TODO: 根据实际协议，决定是否需要编码协议头部键值对，依次写入buf中:
		// 如果需要编码键值对，请反注释encodeHeader实现，并删除TODO
		// encodeHeader(buf, &response.ProtocolHeader)
	}
	// 1.4 content
	if response.ContentLen > 0 {
		// TODO: 根据实际协议，决定是否需要将消息体写入buf中:
		// 如果需要写入报文体，请反注释buf.Write，并删除TODO
		// buf.Write(response.Content.Bytes())
	}

	return buf, nil
}
